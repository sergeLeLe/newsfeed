// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Attachment interface {
	IsAttachment()
}

type InputImagePost struct {
	Location *string `json:"location"`
}

type InputTextPost struct {
	Text *string `json:"text"`
}

type InputVideoPost struct {
	Location *string `json:"location"`
}

type PostInput struct {
	TextPost  *InputTextPost  `json:"textPost"`
	ImagePost *InputImagePost `json:"imagePost"`
	VideoPost *InputVideoPost `json:"videoPost"`
}

type PostType string

const (
	PostTypeText  PostType = "text"
	PostTypeImage PostType = "image"
	PostTypeVideo PostType = "video"
)

var AllPostType = []PostType{
	PostTypeText,
	PostTypeImage,
	PostTypeVideo,
}

func (e PostType) IsValid() bool {
	switch e {
	case PostTypeText, PostTypeImage, PostTypeVideo:
		return true
	}
	return false
}

func (e PostType) String() string {
	return string(e)
}

func (e *PostType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostType", str)
	}
	return nil
}

func (e PostType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
